// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Calculator.proto

#include "Calculator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace calculatorPackage {
PROTOBUF_CONSTEXPR CalculatorRequest::CalculatorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number1_)*/0
  , /*decltype(_impl_.number2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CalculatorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculatorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculatorRequestDefaultTypeInternal() {}
  union {
    CalculatorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculatorRequestDefaultTypeInternal _CalculatorRequest_default_instance_;
PROTOBUF_CONSTEXPR CalculatorReply::CalculatorReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CalculatorReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculatorReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculatorReplyDefaultTypeInternal() {}
  union {
    CalculatorReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculatorReplyDefaultTypeInternal _CalculatorReply_default_instance_;
}  // namespace calculatorPackage
static ::_pb::Metadata file_level_metadata_Calculator_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Calculator_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Calculator_2eproto = nullptr;

const uint32_t TableStruct_Calculator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculatorPackage::CalculatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculatorPackage::CalculatorRequest, _impl_.number1_),
  PROTOBUF_FIELD_OFFSET(::calculatorPackage::CalculatorRequest, _impl_.number2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::calculatorPackage::CalculatorReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::calculatorPackage::CalculatorReply, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::calculatorPackage::CalculatorRequest)},
  { 8, -1, -1, sizeof(::calculatorPackage::CalculatorReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::calculatorPackage::_CalculatorRequest_default_instance_._instance,
  &::calculatorPackage::_CalculatorReply_default_instance_._instance,
};

const char descriptor_table_protodef_Calculator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Calculator.proto\022\021calculatorPackage\"5\n"
  "\021CalculatorRequest\022\017\n\007number1\030\001 \001(\001\022\017\n\007n"
  "umber2\030\002 \001(\001\"!\n\017CalculatorReply\022\016\n\006resul"
  "t\030\001 \001(\0012\355\002\n\021calculatorService\022Q\n\003Add\022$.c"
  "alculatorPackage.CalculatorRequest\032\".cal"
  "culatorPackage.CalculatorReply\"\000\022W\n\tSubs"
  "tract\022$.calculatorPackage.CalculatorRequ"
  "est\032\".calculatorPackage.CalculatorReply\""
  "\000\022V\n\010Multiply\022$.calculatorPackage.Calcul"
  "atorRequest\032\".calculatorPackage.Calculat"
  "orReply\"\000\022T\n\006Divide\022$.calculatorPackage."
  "CalculatorRequest\032\".calculatorPackage.Ca"
  "lculatorReply\"\000B6\n\033io.grpc.examples.calc"
  "ulatorB\017calculatorProtoP\001\242\002\003HLWb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Calculator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Calculator_2eproto = {
    false, false, 559, descriptor_table_protodef_Calculator_2eproto,
    "Calculator.proto",
    &descriptor_table_Calculator_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Calculator_2eproto::offsets,
    file_level_metadata_Calculator_2eproto, file_level_enum_descriptors_Calculator_2eproto,
    file_level_service_descriptors_Calculator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Calculator_2eproto_getter() {
  return &descriptor_table_Calculator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Calculator_2eproto(&descriptor_table_Calculator_2eproto);
namespace calculatorPackage {

// ===================================================================

class CalculatorRequest::_Internal {
 public:
};

CalculatorRequest::CalculatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculatorPackage.CalculatorRequest)
}
CalculatorRequest::CalculatorRequest(const CalculatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalculatorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number1_){}
    , decltype(_impl_.number2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.number1_, &from._impl_.number1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number2_) -
    reinterpret_cast<char*>(&_impl_.number1_)) + sizeof(_impl_.number2_));
  // @@protoc_insertion_point(copy_constructor:calculatorPackage.CalculatorRequest)
}

inline void CalculatorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number1_){0}
    , decltype(_impl_.number2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CalculatorRequest::~CalculatorRequest() {
  // @@protoc_insertion_point(destructor:calculatorPackage.CalculatorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalculatorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CalculatorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalculatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:calculatorPackage.CalculatorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.number1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number2_) -
      reinterpret_cast<char*>(&_impl_.number1_)) + sizeof(_impl_.number2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculatorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double number1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.number1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double number2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.number2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalculatorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculatorPackage.CalculatorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double number1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number1 = this->_internal_number1();
  uint64_t raw_number1;
  memcpy(&raw_number1, &tmp_number1, sizeof(tmp_number1));
  if (raw_number1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_number1(), target);
  }

  // double number2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number2 = this->_internal_number2();
  uint64_t raw_number2;
  memcpy(&raw_number2, &tmp_number2, sizeof(tmp_number2));
  if (raw_number2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_number2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculatorPackage.CalculatorRequest)
  return target;
}

size_t CalculatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculatorPackage.CalculatorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double number1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number1 = this->_internal_number1();
  uint64_t raw_number1;
  memcpy(&raw_number1, &tmp_number1, sizeof(tmp_number1));
  if (raw_number1 != 0) {
    total_size += 1 + 8;
  }

  // double number2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number2 = this->_internal_number2();
  uint64_t raw_number2;
  memcpy(&raw_number2, &tmp_number2, sizeof(tmp_number2));
  if (raw_number2 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalculatorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalculatorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalculatorRequest::GetClassData() const { return &_class_data_; }


void CalculatorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalculatorRequest*>(&to_msg);
  auto& from = static_cast<const CalculatorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculatorPackage.CalculatorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number1 = from._internal_number1();
  uint64_t raw_number1;
  memcpy(&raw_number1, &tmp_number1, sizeof(tmp_number1));
  if (raw_number1 != 0) {
    _this->_internal_set_number1(from._internal_number1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_number2 = from._internal_number2();
  uint64_t raw_number2;
  memcpy(&raw_number2, &tmp_number2, sizeof(tmp_number2));
  if (raw_number2 != 0) {
    _this->_internal_set_number2(from._internal_number2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalculatorRequest::CopyFrom(const CalculatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculatorPackage.CalculatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorRequest::IsInitialized() const {
  return true;
}

void CalculatorRequest::InternalSwap(CalculatorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalculatorRequest, _impl_.number2_)
      + sizeof(CalculatorRequest::_impl_.number2_)
      - PROTOBUF_FIELD_OFFSET(CalculatorRequest, _impl_.number1_)>(
          reinterpret_cast<char*>(&_impl_.number1_),
          reinterpret_cast<char*>(&other->_impl_.number1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculatorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Calculator_2eproto_getter, &descriptor_table_Calculator_2eproto_once,
      file_level_metadata_Calculator_2eproto[0]);
}

// ===================================================================

class CalculatorReply::_Internal {
 public:
};

CalculatorReply::CalculatorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:calculatorPackage.CalculatorReply)
}
CalculatorReply::CalculatorReply(const CalculatorReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalculatorReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:calculatorPackage.CalculatorReply)
}

inline void CalculatorReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CalculatorReply::~CalculatorReply() {
  // @@protoc_insertion_point(destructor:calculatorPackage.CalculatorReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalculatorReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CalculatorReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalculatorReply::Clear() {
// @@protoc_insertion_point(message_clear_start:calculatorPackage.CalculatorReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculatorReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalculatorReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:calculatorPackage.CalculatorReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double result = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_result = this->_internal_result();
  uint64_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calculatorPackage.CalculatorReply)
  return target;
}

size_t CalculatorReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calculatorPackage.CalculatorReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double result = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_result = this->_internal_result();
  uint64_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalculatorReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalculatorReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalculatorReply::GetClassData() const { return &_class_data_; }


void CalculatorReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalculatorReply*>(&to_msg);
  auto& from = static_cast<const CalculatorReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:calculatorPackage.CalculatorReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_result = from._internal_result();
  uint64_t raw_result;
  memcpy(&raw_result, &tmp_result, sizeof(tmp_result));
  if (raw_result != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalculatorReply::CopyFrom(const CalculatorReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calculatorPackage.CalculatorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorReply::IsInitialized() const {
  return true;
}

void CalculatorReply::InternalSwap(CalculatorReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculatorReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Calculator_2eproto_getter, &descriptor_table_Calculator_2eproto_once,
      file_level_metadata_Calculator_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace calculatorPackage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::calculatorPackage::CalculatorRequest*
Arena::CreateMaybeMessage< ::calculatorPackage::CalculatorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculatorPackage::CalculatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::calculatorPackage::CalculatorReply*
Arena::CreateMaybeMessage< ::calculatorPackage::CalculatorReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::calculatorPackage::CalculatorReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
