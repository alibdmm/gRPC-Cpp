// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Calculator.proto
#ifndef GRPC_Calculator_2eproto__INCLUDED
#define GRPC_Calculator_2eproto__INCLUDED

#include "Calculator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace calculatorPackage {

class calculatorService final {
 public:
  static constexpr char const* service_full_name() {
    return "calculatorPackage.calculatorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> AsyncAdd(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    virtual ::grpc::Status Substract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> AsyncSubstract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(AsyncSubstractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> PrepareAsyncSubstract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(PrepareAsyncSubstractRaw(context, request, cq));
    }
    virtual ::grpc::Status Multiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> AsyncMultiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(AsyncMultiplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> PrepareAsyncMultiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(PrepareAsyncMultiplyRaw(context, request, cq));
    }
    virtual ::grpc::Status Divide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> AsyncDivide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(AsyncDivideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>> PrepareAsyncDivide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>>(PrepareAsyncDivideRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Add(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Substract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Substract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Multiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Multiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Divide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Divide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* AsyncSubstractRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* PrepareAsyncSubstractRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* AsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* AsyncDivideRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculatorPackage::CalculatorReply>* PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Add(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> AsyncAdd(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Substract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> AsyncSubstract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(AsyncSubstractRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> PrepareAsyncSubstract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(PrepareAsyncSubstractRaw(context, request, cq));
    }
    ::grpc::Status Multiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> AsyncMultiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(AsyncMultiplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> PrepareAsyncMultiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(PrepareAsyncMultiplyRaw(context, request, cq));
    }
    ::grpc::Status Divide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::calculatorPackage::CalculatorReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> AsyncDivide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(AsyncDivideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>> PrepareAsyncDivide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>>(PrepareAsyncDivideRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Add(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Substract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) override;
      void Substract(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Multiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) override;
      void Multiply(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Divide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, std::function<void(::grpc::Status)>) override;
      void Divide(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* AsyncAddRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* AsyncSubstractRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* PrepareAsyncSubstractRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* AsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* PrepareAsyncMultiplyRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* AsyncDivideRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculatorPackage::CalculatorReply>* PrepareAsyncDivideRaw(::grpc::ClientContext* context, const ::calculatorPackage::CalculatorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Substract_;
    const ::grpc::internal::RpcMethod rpcmethod_Multiply_;
    const ::grpc::internal::RpcMethod rpcmethod_Divide_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response);
    virtual ::grpc::Status Substract(::grpc::ServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response);
    virtual ::grpc::Status Multiply(::grpc::ServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response);
    virtual ::grpc::Status Divide(::grpc::ServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::calculatorPackage::CalculatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculatorPackage::CalculatorReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Substract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Substract() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Substract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Substract(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubstract(::grpc::ServerContext* context, ::calculatorPackage::CalculatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculatorPackage::CalculatorReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Multiply() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiply(::grpc::ServerContext* context, ::calculatorPackage::CalculatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculatorPackage::CalculatorReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Divide() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDivide(::grpc::ServerContext* context, ::calculatorPackage::CalculatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculatorPackage::CalculatorReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Substract<WithAsyncMethod_Multiply<WithAsyncMethod_Divide<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Add() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::MessageAllocator< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Substract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Substract() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response) { return this->Substract(context, request, response); }));}
    void SetMessageAllocatorFor_Substract(
        ::grpc::MessageAllocator< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Substract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Substract(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Substract(
      ::grpc::CallbackServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Multiply() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response) { return this->Multiply(context, request, response); }));}
    void SetMessageAllocatorFor_Multiply(
        ::grpc::MessageAllocator< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Multiply(
      ::grpc::CallbackServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Divide() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculatorPackage::CalculatorRequest* request, ::calculatorPackage::CalculatorReply* response) { return this->Divide(context, request, response); }));}
    void SetMessageAllocatorFor_Divide(
        ::grpc::MessageAllocator< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Divide(
      ::grpc::CallbackServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Add<WithCallbackMethod_Substract<WithCallbackMethod_Multiply<WithCallbackMethod_Divide<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Substract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Substract() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Substract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Substract(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Multiply() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Divide() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Substract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Substract() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Substract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Substract(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubstract(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Multiply() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Divide() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDivide(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Add() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~WithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Substract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Substract() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Substract(context, request, response); }));
    }
    ~WithRawCallbackMethod_Substract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Substract(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Substract(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Multiply() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Multiply(context, request, response); }));
    }
    ~WithRawCallbackMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Multiply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Divide() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Divide(context, request, response); }));
    }
    ~WithRawCallbackMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Divide(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculatorPackage::CalculatorRequest,::calculatorPackage::CalculatorReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Substract : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Substract() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* streamer) {
                       return this->StreamedSubstract(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Substract() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Substract(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubstract(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculatorPackage::CalculatorRequest,::calculatorPackage::CalculatorReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Multiply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Multiply() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* streamer) {
                       return this->StreamedMultiply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Multiply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Multiply(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculatorPackage::CalculatorRequest,::calculatorPackage::CalculatorReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Divide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Divide() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculatorPackage::CalculatorRequest, ::calculatorPackage::CalculatorReply>* streamer) {
                       return this->StreamedDivide(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Divide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Divide(::grpc::ServerContext* /*context*/, const ::calculatorPackage::CalculatorRequest* /*request*/, ::calculatorPackage::CalculatorReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDivide(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculatorPackage::CalculatorRequest,::calculatorPackage::CalculatorReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Substract<WithStreamedUnaryMethod_Multiply<WithStreamedUnaryMethod_Divide<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Substract<WithStreamedUnaryMethod_Multiply<WithStreamedUnaryMethod_Divide<Service > > > > StreamedService;
};

}  // namespace calculatorPackage


#endif  // GRPC_Calculator_2eproto__INCLUDED
